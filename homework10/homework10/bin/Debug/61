<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="上一篇(https://www.cnblogs.com/meowv/p/12966092.html)文章使用AutoMapper来处理对象与对象之间的映射关系，本篇主要围绕定时任务和数据抓取相关的知识" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>基于 abp vNext 和 .NET Core 开发博客项目 - 定时任务最佳实战（一） - 阿星Plus - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/meowv/custom.css?v=kRG3NHMWj7tGxPARFq8LMdMtbig=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/meowv/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/meowv/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/meowv/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 324339;
        var currentBlogApp = 'meowv';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/meowv/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/meowv/">阿星Plus</a>
</h1>
<h2>
生命不息，奋斗不止
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>

</li>
<li>


</li>
<li>
</li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
62&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
170</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/meowv/p/12971041.html">基于 abp vNext 和 .NET Core 开发博客项目 - 定时任务最佳实战（一）</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p>上一篇(<a href="https://www.cnblogs.com/meowv/p/12966092.html">https://www.cnblogs.com/meowv/p/12966092.html</a>)文章使用AutoMapper来处理对象与对象之间的映射关系，本篇主要围绕定时任务和数据抓取相关的知识点并结合实际应用，在定时任务中循环处理爬虫任务抓取数据。</p>
<p>开始之前可以删掉之前测试用的几个HelloWorld，没有什么实际意义，直接干掉吧。抓取数据我主要用到了，<code>HtmlAgilityPack</code>和<code>PuppeteerSharp</code>，一般情况下<code>HtmlAgilityPack</code>就可以完成大部分的数据抓取需求了，当在抓取动态网页的时候可以用到<code>PuppeteerSharp</code>，同时<code>PuppeteerSharp</code>还支持将图片保存为图片和PDF等牛逼的功能。</p>
<p>关于这两个库就不多介绍了，不了解的请自行去学习。</p>
<p>先在<code>.BackgroundJobs</code>层安装两大神器：<code>Install-Package HtmlAgilityPack</code>、<code>Install-Package PuppeteerSharp</code>。我在使用Package Manager安装包的时候一般都不喜欢指定版本号，因为这样默认是给我安装最新的版本。</p>
<p>之前无意中发现爱思助手的网页版有很多手机壁纸(<a href="https://www.i4.cn/wper_4_0_1_1.html">https://www.i4.cn/wper_4_0_1_1.html</a>)，于是我就动了小心思，把所有手机壁纸全部抓取过来自嗨，可以看看我个人博客中的成品吧：<a href="https://meowv.com/wallpaper">https://meowv.com/wallpaper</a> 😝😝😝</p>
<p><img src="https://img2020.cnblogs.com/blog/891843/202005/891843-20200527140750600-1681789464.jpg" alt="1"></p>
<p>最开始我是用Python实现的，现在我们在.NET中抓它。</p>
<p>我数了一下，一共有20个分类，直接在<code>.Domain.Shared</code>层添加一个壁纸分类的枚举<code>WallpaperEnum.cs</code>。</p>
<pre><code class="language-CSharp">//WallpaperEnum.cs
using System.ComponentModel;

namespace Meowv.Blog.Domain.Shared.Enum
{
    public enum WallpaperEnum
    {
        [Description(&quot;美女&quot;)]
        Beauty = 1,

        [Description(&quot;型男&quot;)]
        Sportsman = 2,

        [Description(&quot;萌娃&quot;)]
        CuteBaby = 3,

        [Description(&quot;情感&quot;)]
        Emotion = 4,

        [Description(&quot;风景&quot;)]
        Landscape = 5,

        [Description(&quot;动物&quot;)]
        Animal = 6,

        [Description(&quot;植物&quot;)]
        Plant = 7,

        [Description(&quot;美食&quot;)]
        Food = 8,

        [Description(&quot;影视&quot;)]
        Movie = 9,

        [Description(&quot;动漫&quot;)]
        Anime = 10,

        [Description(&quot;手绘&quot;)]
        HandPainted = 11,

        [Description(&quot;文字&quot;)]
        Text = 12,

        [Description(&quot;创意&quot;)]
        Creative = 13,

        [Description(&quot;名车&quot;)]
        Car = 14,

        [Description(&quot;体育&quot;)]
        PhysicalEducation = 15,

        [Description(&quot;军事&quot;)]
        Military = 16,

        [Description(&quot;节日&quot;)]
        Festival = 17,

        [Description(&quot;游戏&quot;)]
        Game = 18,

        [Description(&quot;苹果&quot;)]
        Apple = 19,

        [Description(&quot;其它&quot;)]
        Other = 20,
    }
}
</code></pre>
<p>查看原网页可以很清晰的看到，每一个分类对应了一个不同的URL，于是手动创建一个抓取的列表，列表内容包括URL和分类，然后我又想用多线程来访问URL，返回结果。新建一个通用的待抓项的类，起名为:<code>WallpaperJobItem.cs</code>，为了规范和后续的壁纸查询接口，我们放在<code>.Application.Contracts</code>层中。</p>
<pre><code class="language-CSharp">//WallpaperJobItem.cs
using Meowv.Blog.Domain.Shared.Enum;

namespace Meowv.Blog.Application.Contracts.Wallpaper
{
    public class WallpaperJobItem&lt;T&gt;
    {
        /// &lt;summary&gt;
        /// &lt;see cref=&quot;Result&quot;/&gt;
        /// &lt;/summary&gt;
        public T Result { get; set; }

        /// &lt;summary&gt;
        /// 类型
        /// &lt;/summary&gt;
        public WallpaperEnum Type { get; set; }
    }
}
</code></pre>
<p><code>WallpaperJobItem&lt;T&gt;</code>接受一个参数T，Result的类型由T决定，在<code>.BackgroundJobs</code>层Jobs文件夹中新建一个任务，起名叫做：<code>WallpaperJob.cs</code>吧。老样子，继承<code>IBackgroundJob</code>。</p>
<pre><code class="language-CSharp">//WallpaperJob.cs
using Meowv.Blog.Application.Contracts.Wallpaper;
using Meowv.Blog.Domain.Shared.Enum;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Meowv.Blog.BackgroundJobs.Jobs.Wallpaper
{
    public class WallpaperJob : IBackgroundJob
    {
        public async Task ExecuteAsync()
        {
            var wallpaperUrls = new List&lt;WallpaperJobItem&lt;string&gt;&gt;
            {
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_1_1.html&quot;, Type = WallpaperEnum.Beauty },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_58_1.html&quot;, Type = WallpaperEnum.Sportsman },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_66_1.html&quot;, Type = WallpaperEnum.CuteBaby },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_4_1.html&quot;, Type = WallpaperEnum.Emotion },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_3_1.html&quot;, Type = WallpaperEnum.Landscape },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_9_1.html&quot;, Type = WallpaperEnum.Animal },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_13_1.html&quot;, Type = WallpaperEnum.Plant },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_64_1.html&quot;, Type = WallpaperEnum.Food },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_11_1.html&quot;, Type = WallpaperEnum.Movie },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_5_1.html&quot;, Type = WallpaperEnum.Anime },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_34_1.html&quot;, Type = WallpaperEnum.HandPainted },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_65_1.html&quot;, Type = WallpaperEnum.Text },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_2_1.html&quot;,  Type = WallpaperEnum.Creative },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_10_1.html&quot;, Type = WallpaperEnum.Car },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_14_1.html&quot;, Type = WallpaperEnum.PhysicalEducation },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_63_1.html&quot;, Type = WallpaperEnum.Military },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_17_1.html&quot;, Type = WallpaperEnum.Festival },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_15_1.html&quot;, Type = WallpaperEnum.Game },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_12_1.html&quot;, Type = WallpaperEnum.Apple },
                new WallpaperJobItem&lt;string&gt; { Result = &quot;https://www.i4.cn/wper_4_19_7_1.html&quot;, Type = WallpaperEnum.Other }
            };
        }
    }
}
</code></pre>
<p>先构建一个要抓取的列表 wallpaperUrls，这里准备用 <code>HtmlAgilityPack</code>，默认只抓取第一页最新的数据。</p>
<pre><code class="language-CSharp">public async Task RunAsync()
{
    ...
    
    var web = new HtmlWeb();
    var list_task = new List&lt;Task&lt;WallpaperJobItem&lt;HtmlDocument&gt;&gt;&gt;();

    wallpaperUrls.ForEach(item =&gt;
    {
        var task = Task.Run(async () =&gt;
        {
            var htmlDocument = await web.LoadFromWebAsync(item.Result);
            return new WallpaperJobItem&lt;HtmlDocument&gt;
            {
                Result = htmlDocument,
                Type = item.Type
            };
        });
        list_task.Add(task);
    });
    Task.WaitAll(list_task.ToArray());
}
</code></pre>
<p>上面这段代码，先new了一个<code>HtmlWeb</code>对象，我们主要用这个对象去加载我们的URL。</p>
<p><code>web.LoadFromWebAsync(...)</code>，它会返回一个<code>HtmlDocument</code>对象，这样就和上面的list_task对应起来，从而也应证了前面添加的<code>WallpaperJobItem</code>是通用的一个待抓项的类。</p>
<p>循环处理 wallpaperUrls，等待所有请求完成。这样就拿到了20个<code>HtmlDocument</code>，和它的分类，接下来就可以去处理list_task就行了。</p>
<p>在开始处理之前，要想好抓到的图片数据存放在哪里？我这里还是选择存在数据库中，因为有了之前的自定义仓储之增删改查的经验，可以很快的处理这件事情。</p>
<p>添加实体类、自定义仓储、DbSet、Code-First等一些列操作，就不一一介绍了，我相信看过之前文章的人都能完成这一步。</p>
<p>Wallpaper实体类包含主键Guid，标题Title，图片地址Url，类型Type，和一个创建时间CreateTime。</p>
<p>自定义仓储包含一个批量插入的方法：<code>BulkInsertAsync(...)</code>。</p>
<p>贴一下完成后的图片，就不上代码了，如果需要可以去GitHub获取。</p>
<p><img src="https://img2020.cnblogs.com/blog/891843/202005/891843-20200527150720962-813684172.png" alt="2"></p>
<p>回到<code>WallpaperJob</code>，因为我们要抓取的是图片，所以获取到HTML中的img标签就可以了。</p>
<p><img src="https://img2020.cnblogs.com/blog/891843/202005/891843-20200527151349223-1289224079.png" alt="3"></p>
<p>查看源代码发现图片是一个列表呈现的，并且被包裹在<code>//article[@id='wper']/div[@class='jbox']/div[@class='kbox']</code>下面，学过XPath语法的就很容易了，关于XPath语法这里也不做介绍了，对于不会的这里有一篇快速入门的文章：<a href="https://www.cnblogs.com/meowv/p/11310538.html">https://www.cnblogs.com/meowv/p/11310538.html</a> 。</p>
<p>利用XPath Helper工具我们在浏览器上模拟一下选择的节点是否正确。</p>
<p><img src="https://img2020.cnblogs.com/blog/891843/202005/891843-20200527151912268-1871222782.png" alt="4"></p>
<p>使用<code>//article[@id='wper']/div[@class='jbox']/div[@class='kbox']/div/a/img</code>可以成功将图片高亮，说明我们的语法是正确的。</p>
<pre><code class="language-CSharp">public async Task RunAsync()
{
    ...

    var wallpapers = new List&lt;Wallpaper&gt;();

    foreach (var list in list_task)
    {
        var item = await list;

        var imgs = item.Result.DocumentNode.SelectNodes(&quot;//article[@id='wper']/div[@class='jbox']/div[@class='kbox']/div/a/img[1]&quot;).ToList();
        imgs.ForEach(x =&gt;
        {
            wallpapers.Add(new Wallpaper
            {
                Url = x.GetAttributeValue(&quot;data-big&quot;, &quot;&quot;),
                Title = x.GetAttributeValue(&quot;title&quot;, &quot;&quot;),
                Type = (int)item.Type,
                CreateTime = x.Attributes[&quot;data-big&quot;].Value.Split(&quot;/&quot;).Last().Split(&quot;_&quot;).First().TryToDateTime()
            });
        });
    }
    ...
}
</code></pre>
<p>在 foreach 循环中先拿到当前循环的Item对象，即<code>WallpaperJobItem&lt;HtmlDocument&gt;</code>。</p>
<p>通过<code>.DocumentNode.SelectNodes()</code>语法获取到图片列表，因为在a标签下面有两个img标签，取第一个即可。</p>
<p><code>GetAttributeValue()</code>是<code>HtmlAgilityPack</code>的扩展方法，用于直接获取属性值。</p>
<p>在看图片的时候，发现图片地址的规则是根据时间戳生成的，于是用<code>TryToDateTime()</code>扩展方法将其处理转换成时间格式。</p>
<p>这样我们就将所有图片按分类存进了列表当中，接下来调用批量插入方法。</p>
<p>在构造函数中注入自定义仓储<code>IWallpaperRepository</code>。</p>
<pre><code class="language-CSharp">...
        private readonly IWallpaperRepository _wallpaperRepository;

        public WallpaperJob(IWallpaperRepository wallpaperRepository)
        {
            _wallpaperRepository = wallpaperRepository;
        }
...
</code></pre>
<pre><code class="language-CSharp">...
	var urls = (await _wallpaperRepository.GetListAsync()).Select(x =&gt; x.Url);
	wallpapers = wallpapers.Where(x =&gt; !urls.Contains(x.Url)).ToList();
	if (wallpapers.Any())
	{
	    await _wallpaperRepository.BulkInsertAsync(wallpapers);
	}
</code></pre>
<p>因为抓取的图片可能存在重复的情况，我们需要做一个去重处理，先查询到数据库中的所有的URL列表，然后在判断抓取到的url是否存在，最后调用<code>BulkInsertAsync(...)</code>批量插入方法。</p>
<p>这样就完成了数据抓取的全部逻辑，在保存数据到数据库之后我们可以进一步操作，比如：写日志、发送邮件通知等等，这里大家自由发挥吧。</p>
<p>写一个扩展方法每隔3小时执行一次。</p>
<pre><code class="language-CSharp">...
        public static void UseWallpaperJob(this IServiceProvider service)
        {
            var job = service.GetService&lt;WallpaperJob&gt;();
            RecurringJob.AddOrUpdate(&quot;壁纸数据抓取&quot;, () =&gt; job.ExecuteAsync(), CronType.Hour(1, 3));
        }
...
</code></pre>
<p>最后在模块内中调用。</p>
<pre><code class="language-CSharp">...
        public override void OnApplicationInitialization(ApplicationInitializationContext context)
        {
            ...
            service.UseWallpaperJob();
        }
</code></pre>
<p>编译运行，打开Hangfire界面手动执行看看效果。</p>
<p><img src="https://img2020.cnblogs.com/blog/891843/202005/891843-20200527154809552-1453497072.png" alt="5"></p>
<p>完美，数据库已经存入了不少数据了，还是要提醒一下：爬虫有风险，抓数需谨慎。</p>
<p>Hangfire定时处理爬虫任务，用<code>HtmlAgilityPack</code>抓取数据后存入数据库，你学会了吗？😁😁😁</p>
<p>开源地址：<a href="https://github.com/Meowv/Blog/tree/blog_tutorial">https://github.com/Meowv/Blog/tree/blog_tutorial</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-29 08:49</span>&nbsp;
<a href="https://www.cnblogs.com/meowv/">阿星Plus</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12971041" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12971041);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 324339, cb_blogApp = 'meowv', cb_blogUserGuid = '7577f5ae-82ca-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 12971041, cb_entryCreatedDate = '2020-05-29 08:49', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 阿星Plus
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
